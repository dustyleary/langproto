S = SourceFile
<W> = <#'[ \t\r\n]*'>
<SEMI> = ';'?

<letter>        = #'\w'
<unicode_digit> = #'[0-9]'
<unicode_char>  = #'.'
<newline>       = '\n'
<unicode_value> = unicode_char
byte_value      = hex_byte_value
hex_byte_value  = #'\\x[0-9a-fA-F]{2}'
identifier      = #'[a-zA-Z_]\w*'

QualifiedIdent  = PackageName '.' identifier

char_lit        = "'" ( unicode_value | byte_value ) "'"

string_lit               = raw_string_lit | interpreted_string_lit
<raw_string_lit>         = '`' { unicode_char | newline } '`'
<interpreted_string_lit> = <'\"'> #'[^"]*' <'\"'>

int_lit     = decimal_lit | octal_lit | hex_lit
decimal_lit = #'[1-9][0-9]*'
octal_lit   = #'0[0-7]*'
hex_lit     = #'0[xX][0-9a-fA-f]+'

float_lit = decimals "." [ decimals ] [ exponent ] |
            decimals exponent |
            "." decimals [ exponent ]
decimals  = #'[0-9]+'
exponent  = ( "e" | "E" ) [ "+" | "-" ] decimals

<SourceFile> = W PackageClause W SEMI W { ImportDecl W SEMI } W { TopLevelDecl W SEMI }
PackageClause = <'package'> W PackageName
PackageName = identifier

ImportDecl = <'import'> W ( ImportSpec | <'('> { W ImportSpec W SEMI} <')'> )
ImportSpec = [ '.' | PackageName ] ImportPath
ImportPath = string_lit

TopLevelDecl      = Declaration | FunctionDecl | MethodDecl
Declaration       = ConstDecl | TypeDecl | VarDecl

VarDecl           = 'VarDecl'

TypeDecl          = <'type'> W ( TypeSpec | <'('> { W TypeSpec W SEMI} <')'> )
TypeSpec          = identifier W Type
Type              = TypeName | TypeLit | <'('> W Type W <')'>
TypeName          = identifier | QualifiedIdent
TypeLit           = 'TypeLit'

ConstDecl         = <'const'> W ( ConstSpec | <'('> { W ConstSpec W SEMI} <')'> )
ConstSpec         = IdentifierList [ [ W Type ] W "=" W ExpressionList ]
<IdentifierList>  = identifier { W <','> identifier }
ExpressionList    = Expression { W <','> Expression }

Expression = UnaryExpr | Expression W binary_op W UnaryExpr
UnaryExpr  = PrimaryExpr | unary_op W UnaryExpr

binary_op  = "||" | "&&" | rel_op | add_op | mul_op
rel_op     = "==" | "!=" | "<" | "<=" | ">" | ">="
add_op     = "+" | "-" | "|" | "^" .
mul_op     = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^"

unary_op   = "+" | "-" | "!" | "^" | "*" | "&" | "<-"

PrimaryExpr =
	Operand |
	Conversion |
	BuiltinCall |
	PrimaryExpr Selector |
	PrimaryExpr Index |
	PrimaryExpr Slice |
	PrimaryExpr TypeAssertion |
	PrimaryExpr Call

Selector       = "." identifier
Index          = "[" Expression "]"
Slice          = "[" [ Expression ] ":" [ Expression ] "]"
TypeAssertion  = "." "(" Type ")"
Call           = "(" [ ArgumentList [ "," ] ] ")"
ArgumentList   = ExpressionList [ "..." ]

Operand     = Literal | OperandName | MethodExpr | "(" Expression ")"
Literal     = BasicLit | CompositeLit | FunctionLit
BasicLit    = int_lit | float_lit | char_lit | string_lit
OperandName = identifier | QualifiedIdent

MethodExpr    = 'MethodExpr'
CompositeLit  = 'CompositeLit'
FunctionLit   = 'FunctionLit'
Conversion    = 'Conversion'
BuiltinCall   = 'BuiltinCall'

FunctionDecl = "func" W FunctionName W Signature [ W Body ]
FunctionName = identifier
Body         = Block

MethodDecl   = "func" W Receiver W MethodName W Signature [ W Body ]
Receiver     = "(" W [ identifier W ] [ "*" W ] BaseTypeName W ")"
BaseTypeName = identifier

FunctionType   = "func" W Signature
Signature      = Parameters [ W Result ]
Result         = Parameters | Type
Parameters     = "(" W [ ParameterList W [ "," W ] ] ")"
ParameterList  = ParameterDecl W { "," W ParameterDecl W }
ParameterDecl  = [ IdentifierList ] [ "..." ] Type

Block = "{" W { Statement W ";" W } "}"

InterfaceType      = "interface" W "{" W { MethodSpec W ";" W } "}"
MethodSpec         = MethodName W Signature | InterfaceTypeName
MethodName         = identifier
InterfaceTypeName  = TypeName

Statement = 'Statement'

