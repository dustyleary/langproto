(use srfi-13)
(use posix)

(define (get-llvm-text prog)
  (string-join (flatten prog) "\n")
)

(define (exec-llvm-prog prog)
  (define separator (make-string 80 #\=))
  (let-values ([(child-stdout child-stdin pid child-stderr) (process* "lli" '())])
    (define llvm-text (get-llvm-text prog))
    (print separator)
    (print llvm-text)
    (display llvm-text child-stdin)
    (print separator)
    (close-output-port child-stdin)
    (let-values ([(pid flag status) (process-wait pid)])
      (define childout (read-string #f child-stdout))
      (define childerr (read-string #f child-stderr))
      (define output childout)
      (if (not (equal? childerr ""))
        (set! output (string-join (list output "--STDERR--" childerr) "\n"))
      )
      (write (list status output))
      (print)
      (list status output)
    )
  )
)

(define (exec-module module)
  (print module)
)
